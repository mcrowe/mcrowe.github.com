<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Mitch Crowe]]></title>
  <link href="http://blog.mitchcrowe.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.mitchcrowe.com/"/>
  <updated>2012-04-18T08:28:18-07:00</updated>
  <id>http://blog.mitchcrowe.com/</id>
  <author>
    <name><![CDATA[Mitch Crowe]]></name>
    <email><![CDATA[crowe.mitch@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The 10 Most Underused ActiveRecord::Relation Methods]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2012/04/14/10-most-underused-activerecord-relation-methods/"/>
    <updated>2012-04-14T22:51:00-07:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2012/04/14/10-most-underused-activerecord-relation-methods</id>
    <content type="html"><![CDATA[<p>Knee-deep in <code>ActiveRecord::Relation</code> code yesterday, I was reminded of some interesting nuggets that I've seen used far too rarely. Here, I’ve gathered my top ten most underused relation methods from that list for your reading delight.</p>

<!-- more -->


<h3>10. <code>first_or_create</code> with a block</h3>

<p><code>first_or_create</code> is very familiar:</p>

<p><code>ruby
Book.where(:title =&gt; 'Tale of Two Cities').first_or_create
</code></p>

<p>and does exactly what it says. Often, though, you want to find a record with certain attributes, or create one with those <em>and</em> additional attributes. To do this succinctly, you can supply a block to <code>first_or_create</code>:</p>

<p><code>ruby
Book.where(:title =&gt; 'Tale of Two Cities').first_or_create do |book|
  book.author = 'Charles Dickens'
  book.published_year = 1859
end
</code></p>

<h3>9. <code>first_or_initialize</code></h3>

<p>If you don't want to save the record yet, you can use <code>first_or_initialize</code>:</p>

<p><code>ruby
Book.where(:title =&gt; 'Tale of Two Cities').first_or_initialize
</code></p>

<h3>8. <code>scoped</code></h3>

<p>Sometimes you want an <code>ActiveRecord::Relation</code> representing all the records of a class. You can easily generate one using the <code>scoped</code> method:</p>

<p>```ruby
def search(query)
  if query.blank?</p>

<pre><code>scoped
</code></pre>

<p>  else</p>

<pre><code>q = "%#{query}%"
where("title like ? or author like ?", q, q)
</code></pre>

<p>  end
end
```</p>

<h3>7. <code>none</code> <em>(rails 4 only)</em></h3>

<p>Likewise, sometimes you want an <code>ActiveRecord::Relation</code> that contains no objects. Returning an empty array is usually not a great idea if the consumer of your API is expecting a relation object. Instead, you can use <code>none</code>.</p>

<p>```ruby
def filter(filter_name)
  case filter_name
  when :all</p>

<pre><code>scoped
</code></pre>

<p>  when :published</p>

<pre><code>where(:published =&gt; true)
</code></pre>

<p>  when :unpublished</p>

<pre><code>where(:published =&gt; false)
</code></pre>

<p>  else</p>

<pre><code>none
</code></pre>

<p>  end
end
```</p>

<p><strong>Note:</strong>  You have to be seriously living on the edge to use <code>none</code> right now. It will be available in rails 4, but not 3. It is easy to write your own in the meantime, though, checkout this <a href="http://stackoverflow.com/questions/4877931/how-to-return-an-empty-activerecord-relation">stack overflow thread</a>.</p>

<h3>6. <code>find_each</code></h3>

<p>If you want to iterate over thousands of records, you probably don't want to use <code>each</code>. It will execute a single query to get all the records, and then instantiate them all into memory. If you have enough memory to spare, go for it. Otherwise, this is a nice way to freeze up your Rails app! <code>find_each</code> instead finds a batch of records at a time (1000 by default) and yields those one at a time, so that you don't have them all in memory at the same time.</p>

<p>```ruby
Book.where(:published => true).find_each do |book|</p>

<pre><code>puts "Do something with #{book.title} here!"
</code></pre>

<p>end
```</p>

<p>Note that you can't specify the order of records yielded by <code>find_each</code>. If you specify one on your relation, it will simply be ignored.</p>

<h3>5. <code>to_sql</code> and <code>explain</code></h3>

<p><code>ActiveRecord</code> is great, but it doesn't always generate the queries you think it will. Jump in the console and run these commands on the relation you're building, to make sure it maps to a smart query, or that it's using the indices you lovingly crafted:</p>

<p>```ruby
Library.joins(:book).to_sql</p>

<h1>=> SQL query for you database.</h1>

<p>Libray.joins(:book).explain</p>

<h1>=> Database explain for the query.</h1>

<p>```</p>

<h3>4. <code>find_by</code> <em>(rails 4 only)</em></h3>

<p>Rails code tends to be littered with lines like:</p>

<p><code>ruby
Book.where(:title =&gt; 'Three Day Road', :author =&gt; 'Joseph Boyden').first
</code></p>

<p>Instead, you can use the shortcut method <code>find_by</code>:</p>

<p><code>ruby
Book.find_by(:title =&gt; 'Three Day Road', :author =&gt; 'Joseph Boyden')
</code></p>

<p>which does exactly the same thing.</p>

<p><strong>Note:</strong>  You have to be seriously living on the edge to use <code>find_by</code> right now. It will be available in rails 4, but not 3.</p>

<h3>3. <code>scoping</code></h3>

<p>You can "scope" methods on a class to a particular relation. Consider the following example from the Rails documentation:</p>

<p><code>ruby
Comment.where(:post_id =&gt; 1).scoping do
  Comment.first # SELECT * FROM comments WHERE post_id = 1
end
</code></p>

<p>This is all kinds of useful.</p>

<h3>2. <code>pluck</code></h3>

<p>Want an array of column values for certain records? I've seen this too many times:</p>

<p><code>ruby
published_book_titles = Book.published.select(:title).map(&amp;:title)
</code></p>

<p>Or, even worse:</p>

<p><code>ruby
published_book_titles = Book.published.map(&amp;:title)
</code></p>

<p>Instead, use pluck:</p>

<p><code>ruby
published_book_titles = Book.published.pluck(:title)
</code></p>

<h3>1. <code>merge</code></h3>

<p>I couldn't live without this jewel, but it's strangely un-documented in the source, and not mentioned in any guide or book I've seen. Among other uses, it allows you to do a join, and filter by a named scope on the joined model:</p>

<p>```ruby
class Account &lt; ActiveRecord::Base
  ...
  def self.with_unread_messages</p>

<pre><code>joins(:messages).merge( Message.with_unread_messages )
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Rails debugging in IE with a Mac and VirtualBox]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/12/13/easy-rails-debugging-in-ie-with-a-mac-and-virtualbox/"/>
    <updated>2011-12-13T11:37:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/12/13/easy-rails-debugging-in-ie-with-a-mac-and-virtualbox</id>
    <content type="html"><![CDATA[<p>Internet Explorer is still more than 60% of my traffic, and I need to do a lot of feature testing on it. A lot of folks push up to a staging server then point a virtual machine to that server. This is too slow for me. Especially when I'm hunting down and fixing particularly pernicious css bugs, there is a lot of tweaking involved, and re-deploying for each test just doesn't cut it.</p>

<!-- more -->


<p>Instead, I setup VirtualBox to connect to my development server so I don't need to re-deploy to see changes in IE. It makes debugging in IE almost as easy as in other browsers!</p>

<p>Assuming you have, or can, setup VirtualBox with XP or Windows 7 (if not there are a thousand tutorials on google), the rest takes a couple of seconds. VirtualBox's default setting will allow it to connect to your Mac's localhost through <code>http://10.0.2.2</code>. Forwarding ports is messier, so instead we can run rails on port 80. This requires running your server as a super user. Assuming you're using rvm, run:</p>

<pre><code>rvmsudo rails server -p 80
</code></pre>

<p>and verify you can hit the server at <code>http://localhost</code> on your Mac, and <code>http://10.0.2.2</code> in VirtualBox. You're good to go!</p>

<p>While you're at it, I'd recommend installing <a href="http://utilu.com/IECollection/">IE Collection</a>, so that you can easily test on all versions of IE on the same box.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubynu—A scaffold generator for ruby projects]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/12/12/rubynu-a-scaffold-generator-for-ruby-projects/"/>
    <updated>2011-12-12T12:17:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/12/12/rubynu-a-scaffold-generator-for-ruby-projects</id>
    <content type="html"><![CDATA[<p>Creating my preferred scaffolding for new ruby projects by hand has gotten old. Sure, there are tools out there like bundler's <code>bundle gem</code> to do this for you, but they aren't flexible enough to meet everybody's preferences. I want something as flexible as my tastes are fickle, something I can change the template to on a whim.</p>

<!-- more -->


<p>So, I built <code>rubynu</code>. It's a Thor script that leans heavily on Thor's directory templating abilities. Thor is amazing for this kind of generator: instead of building everything programatically, you can define an entire directory template&mdash;using erb templating for file contents, file names, and even directory structure. This kind of template makes it stupid easy to add new files, or to do any number of structural changes to it without touching the script itself. By Thor's Hammer!</p>

<p>Currently, <code>rubynu</code> builds a project with the standard structure:</p>

<pre><code>bin/
lib/
  %app_name%.rb
  %app_name%/
spec/
Gemfile
README.markdown 
</code></pre>

<p>It also sets up rspec, with a <code>spec_helper</code>, <code>.rspec</code>, and a pending spec; RVM with an <code>.rvmrc</code>; git with a <code>.gitignore</code>; as well as some useful scaffolded code.</p>

<p>For usage, installation instructions, and to view the source, check out <a href="https://github.com/mcrowe/Rubynu">rubynu on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paranoid - A backup script for when the world's out to get you]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/11/07/paranoid-a-backup-script-for-when-the-world-slash-s-out-to-get-you/"/>
    <updated>2011-11-07T16:28:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/11/07/paranoid-a-backup-script-for-when-the-world-slash-s-out-to-get-you</id>
    <content type="html"><![CDATA[<p>When I've put a ton of effort into a personal project, I tend to get paranoid that I'll somehow find a way to toast it. I know, I know, git, github, and time machine already have my back. Sometimes that's just not enough, though, and I find myself periodically making manual copies of important projects to a backup directory. Whether I need it or not, having hardcopy snapshots just makes me feel better.</p>

<!-- more -->


<p>So I wrote paranoid, a Thor script for those paranoid but lazy coders like me. Sure, we could use a one-liner <code>cp -rf</code>, or <code>rsync</code> command, but there are a few niceties that paranoid gives you:</p>

<ul>
<li><p>Timestamped backups, so they are never written over, and you can easily revisit a snapshot of the project at any given time.</p></li>
<li><p>You can specify files to exclude from a backup on a project-by-project basis by modifying a <code>.backupignore</code> file. This allows you to ignore <code>.git</code> and <code>.bundle</code> directories as well as any project specific files such as large data dumps that you might not want copied over and over.</p></li>
</ul>


<h3>Install paranoid</h3>

<p>Paranoid is a <a href="https://github.com/wycats/thor">Thor</a> script, and you will have to install Thor first. Then, clone the repository and run: <code>thor install paranoid.thor</code></p>

<h3>Make your projects paranoid</h3>

<p>In your project root directory, run: <code>thor paranoid init</code>
This creates a default <code>.backupignore</code> file. This file defines patterns for files you don't want to backup in this project. You can now add or remove patterns as you wish.</p>

<h3>Backup a paranoid project</h3>

<p>In your project root directory, run: <code>thor paranoid backup</code>
This rsyncs your project to the <code>~/.paranoid</code> directory, ignoring any files matching the patterns in the project's <code>.backupignore</code> file.</p>
]]></content>
  </entry>
  
</feed>
