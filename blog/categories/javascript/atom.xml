<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | ls -al ~mitchcrowe]]></title>
  <link href="http://blog.mitchcrowe.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.mitchcrowe.com/"/>
  <updated>2012-04-06T11:22:18-07:00</updated>
  <id>http://blog.mitchcrowe.com/</id>
  <author>
    <name><![CDATA[Mitch Crowe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I was framed!]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/11/06/i-was-framed/"/>
    <updated>2011-11-06T11:56:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/11/06/i-was-framed</id>
    <content type="html"><![CDATA[<p>Patrolling the SERPs for a website I was working on one day, I came across something odd: An exact duplicate of my site at a different domain, startlingly high in the rankings. Here is its source:</p>

<script src="https://gist.github.com/1439471.js?file=iframe_wrapper.html"></script>




<!-- more -->


<p>OK, it's my site in an frame, fine. The comment, though, left me biting my nails. <em>Who are You</em>&mdash;capital <em>y</em>, no question-mark. Is it just me, or does that sound menacing? Was this meant for me? A way of getting my attention, the scraper knowing I would read the source of the site that hot-linked me? I was perturbed at having no clue what someone's motivation was for this. There was no way to profit that I could tell: users were still on <em>my</em> site, just with a different domain. And, the hot-linking site used a real, 8-letter domain; too expensive to be a random attack. This was deliberate.</p>

<p>My first line of attack, of course, was to try to contact the offender and ask&mdash;kindly&mdash;that they stop ripping my site off. No luck. The domain was registered privately, and the previous owner couldn't help track down the buyer.</p>

<p>I quickly learned first-hand that this is an effective way to hurt the google rankings of a site, by pushing duplicate content up at a different domain. I can only assume that this was a trick played by one of my competitors to stop my site from getting traction, together with a menacing message to make me feel welcome. I'll be honest, I was/am definitely a little spooked. There are plenty of shady characters in my industry, and new competition is never greeted with open arms. Was I going to wake up to a couple of thugs banging my door down? OK, maybe I've watched too many thrillers, but you never know!</p>

<p>Once I got over being cheesed and worried, beating this attack was pretty easy. Adding a canonical url helps google and others learn (slowly) that yours is the real site, and this fixed our rankings. You can do this in Rails with Haml by adding:</p>

<script src="https://gist.github.com/1439471.js?file=application.html.haml%20"></script>


<p>to your <code>application.html.haml</code>.</p>

<p>I also added a frame-busting script which redirects the user to my site if they are viewing it in a frame or an iframe:</p>

<script src="https://gist.github.com/1439471.js?file=frame_buster.js.coffee"></script>


<p>This doesn't help with spiders or indexing as it relies on Javascript, but it does make sure that most users don't get trapped on the false domain. I got this idea from Jeff Atwood's <a href="http://www.codinghorror.com/blog/2009/06/we-done-been-framed.html">article on frame busting</a>. As Jeff points out, the wrapping page has the last say on Javascript, so it can always beat any tricks like this, but you can at least make it frustrating for them to try! (Note that this technique will interfere with some tools you might use which show your site in an iframe, such as google analytics' in-page analytics. You could add a whitelist feature to this, but I didn't need to.)</p>

<p>No bats to my knees so far. Knock on wood...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript templates to the rescue]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/09/14/javascript-templates-to-the-rescue/"/>
    <updated>2011-09-14T18:05:00-07:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/09/14/javascript-templates-to-the-rescue</id>
    <content type="html"><![CDATA[<p>I'm a huge fan of ajax requests which simply return json, letting the client decide what it wants to do with the data. Formatting that data into html client-side, however, has always felt ugly as sin to me. So, we revert to rendering the html on the server and sending that html as an ajax response. This model is fine for simple pages, especially when all we want to do is display data asynchronously. Once we want to interact with this new data, do calculations on it, manipulate it further, things start to get ugly. In the end, I strongly believe that when the client requests data via ajax, it should get data, and not display logic, back.</p>

<!-- more -->


<p>Javascript templates make rendering html client-side a viable option. Actually, they can make it as nice as rendering with something like rails partials.</p>

<p>Don't believe me? Let's check out a simple example, and compare solving it with simple javascript, then with jquery helpers, compared with a few js templates.</p>

<p>Say I have a list of todo actions (which may have been returned via json from an ajax request)</p>

<script src="https://gist.github.com/1031660.js?file=jst_vartodos.js"></script>


<p>and a container</p>

<script src="https://gist.github.com/1031660.js?file=ulcontainer.html"></script>


<p>I want to render checkboxes and labels for these todos in the container, like this:</p>

<script src="https://gist.github.com/1031660.js?file=end.html"></script>


<p>Let's see how this looks.</p>

<h4>plain javascript</h4>

<script src="https://gist.github.com/1031660.js?file=plainjs.html"></script>


<p>Pretty ugly. It's impossible to see the actual html structure at a glance. Of course it might look cleaner with document.write's, but that's an incredibly inflexible solution not to mention the fact that constructing a long string to display html is still gross.</p>

<h4>jQuery</h4>

<script src="https://gist.github.com/1031660.js?file=jquery.html"></script>


<p>Better. Cleaner. Easier to write. Still hard to see the actual html structure.</p>

<h4><a href="http://handlebars.strobeapp.com/">handlebars.js</a></h4>

<script src="https://gist.github.com/1031660.js?file=handlebars.html"></script>


<p>Nice right? A good separation of logic and display. Easy to see the structure of the html at a glance. (Note that I replaced script with scrip-t just to trick the gist syntax highlighter into recognizing html here. You don't really use a scrip-t tag!)</p>

<h4><a href="http://icanhazjs.com/">icanhaz.js</a></h4>

<script src="https://gist.github.com/1031660.js?file=icanhaz.html"></script>


<p>Pretty good too. icanhaz builds in the idea of loading html from a script tag, so you don't need the boilerplate code to get it's html using jquery and compile a template. I actually prefer the flexibility of handlebars' method more, though.</p>

<h4><a href="http://api.jquery.com/jquery.tmpl/">jquery tmpl plugin</a></h4>

<script src="https://gist.github.com/1031660.js?file=tmpl.html"></script>


<p>Pretty similar to handlebars. I do like that as a jquery plugin, we get no scope pollution.</p>

<p>You should also have a look at <a href="http://blog.couchbase.com/mustache-js">moustache.js</a>, which handlebars.js is built upon, and the built in templates in <a href="http://documentcloud.github.com/underscore/">underscore.js</a>.</p>
]]></content>
  </entry>
  
</feed>
