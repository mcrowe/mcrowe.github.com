<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mitch Crowe]]></title>
  <link href="http://blog.mitchcrowe.com/atom.xml" rel="self"/>
  <link href="http://blog.mitchcrowe.com/"/>
  <updated>2014-07-28T17:07:56-07:00</updated>
  <id>http://blog.mitchcrowe.com/</id>
  <author>
    <name><![CDATA[Mitch Crowe]]></name>
    <email><![CDATA[crowe.mitch@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Form Extensions: A Form Object's skinny little brother]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2014/07/28/form-extensions-a-form-objects-skinny-little-brother/"/>
    <updated>2014-07-28T16:32:00-07:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2014/07/28/form-extensions-a-form-objects-skinny-little-brother</id>
    <content type="html"><![CDATA[<p>You have a form who&#8217;s fields don&#8217;t match up to a model. What do you do?</p>

<p>Ask any web developer, and they will confidently defend one of three patterns: <em>fat controllers</em>, <em>callbacks</em>, or <em>form objects</em>. It&#8217;s an on-going, heated, debate.</p>

<p>I would like to propose a fourth pattern, <em>form extensions</em>, which I will argue is often the most pragmatic approach. It is probably not a new idea, but it certainly doesn&#8217;t get the lip-service it should. It deserves a name, and a first-class position in a web-developer&#8217;s toolbelt.</p>

<!-- more -->


<p>Let&#8217;s keep this discussion grounded by considering an example problem. Suppose we have a registration form that includes a user&#8217;s emails address, password, and their account name. When the form is submitted, we want to create a user record, as well as an account for that user. This is a very common problem, and one that I have seen solved in many different ways.</p>

<p>First, let&#8217;s look at the common patterns, then I&#8217;ll present the <em>form extension</em> pattern. I will use Rails for my examples, but the discussion should translate easily to any MVC-based web framework.</p>

<h2>Fat Controller</h2>

<p>This is certainly the simplest solution. The controller is meant to be the glue of your application, so let it &#8220;glue&#8221; together your user and account creation. In Rails this looks something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">account</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:account</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">save</span> <span class="o">&amp;&amp;</span> <span class="n">account</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1"># handle success</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># handle failure</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pros:</h3>

<ul>
<li>It&#8217;s obvious.</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>It&#8217;s a pain to re-use (read: ugly tests!).</li>
<li>It doesn&#8217;t play nice with other patterns (e.g. you can&#8217;t use Devise anymore).</li>
</ul>


<h2>Callbacks</h2>

<p>This is the Rails way. You want an account created when you create a user? Throw a <code>before_create</code> callback on that sucker and you&#8217;re done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:account</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a virtual address for the extra form field.</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:account_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Validate account attributes when a user is created</span>
</span><span class='line'>  <span class="c1"># (Or, you can transfer any errors over manually)</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:account_name</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="ss">:create</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:create_initial_account</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_initial_account</span>
</span><span class='line'>      <span class="n">create_account</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="vi">@account_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pros:</h3>

<ul>
<li>It&#8217;s easy to write.</li>
<li>It&#8217;s simple.</li>
<li>It&#8217;s very re-usable.</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>Coupling. Your user object is now in charge of three concerns: registration, user functionality, and account functionality. This makes for slow, over-complicated tests, and hard-to-reason-about code.</li>
</ul>


<h2>Form objects</h2>

<p>All the cool kids are doing it this way. You have a registration form, so why not make a &#8220;registration&#8221; a first-class object in your system and let that object handle all the registration-related business logic?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Registration</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:account_name</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:email</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:password</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:account_name</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">email</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">submit</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">valid?</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">email</span><span class="p">:</span> <span class="vi">@email</span><span class="p">,</span> <span class="n">password</span><span class="p">:</span> <span class="vi">@password</span><span class="p">)</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">create_account</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="vi">@account_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pros:</h3>

<ul>
<li>It follows the single-responsibility principal.</li>
<li>It&#8217;s re-usable.</li>
<li>It&#8217;s easy to test.</li>
<li>It scales well when complexity is added in the future.</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>Complexity. It&#8217;s an extra layer that is overkill for many cases. You just duplicated your validation logic. Did you test it? Are you delegating the attributes properly? Better test all of them.</li>
</ul>


<h2>Form extensions</h2>

<p>Let me preface by saying that I don&#8217;t think any of the above patterns are wrong. Each has its uses, and none is perfect. <em>Form extensions</em>, I think, strike a nice balance between the simplicity of <em>callbacks</em> and the re-usability of <em>form objects</em>.</p>

<p>The <em>form extensions</em> advocate argues that registration is <em>mostly</em> about creating a user. Sure, we&#8217;d like to create an account, and possibly notify some external services, etc. But that feels like an aside. The <em>callback</em> pattern looks tempting, but the coupling it imposes is a no-go. But what if we had a clean and transparent way to &#8220;opt-in&#8221; to the callback functionality only when it&#8217;s needed, and not have to think about it when its not? That&#8217;s what the <em>form extensions</em> pattern does. You create an extension of your primary model, giving it the extra functionality it needs for the given form. In this case, we would create a <code>RegistratingUser</code>, a <code>User</code> that knows about registration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RegistratingUser</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># You still need this attribute for the form.</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:account_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Only need to add account-specific validations</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:account_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:create_initial_account</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_initial_account</span>
</span><span class='line'>      <span class="n">create_account</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="vi">@account_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can freely use your <code>User</code> model without worrying about any details of registration, and you can opt-in to the registration functionality by using a <code>RegistratingUser</code> model instead. The result is simpler than a form object, because your user already has most of the functionality you need. You don&#8217;t need to manually delegate that behaviour. A <em>form extension</em> is almost as simple as a <em>callback</em>, and almost as scalable as a <em>form object</em>. I believe it strikes the perfect balance in many cases.</p>

<h3>Pros:</h3>

<ul>
<li>It&#8217;s simple.</li>
<li>It&#8217;s re-usable.</li>
<li>It&#8217;s easy to test.</li>
<li>There is less to test than a form object, if we trust inheritance.</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>It won&#8217;t handle future complexity as well as <em>form objects</em>. It uses inheritance instead of composition, so you are leaking user-related concerns into your registration concern. If the registration logic will be complex, I would recommend a form object instead.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roleable roles for Ruby on Rails]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2012/04/16/roleable-roles-for-ruby-on-rails/"/>
    <updated>2012-04-16T20:45:00-07:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2012/04/16/roleable-roles-for-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>I was searching for just the right roles system to go with my <code>cancan</code> authorized, <code>ActiveRecord</code>-backed Rails app, and didn&#8217;t find anything I liked. There are at least a dozen gems out there, but they were all either too simple, too complex, or too ugly for my liking. So, like any good open-sourcer, I wrote my own after my biased taste. And, <code>roleable</code> was born. Check out the <a href="https://github.com/mcrowe/roleable">project page</a>, and the <a href="http://rubydoc.info/gems/roleable/frames">API documentation</a>.</p>

<p><code>roleable</code> is deliberately simple in it&#8217;s implementation. It allows you to add user roles scoped to a instance of another model (e.g. make a use an author of a given article), or global roles (e.g. an admin role).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 10 Most Underused ActiveRecord::Relation Methods]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2012/04/14/10-most-underused-activerecord-relation-methods/"/>
    <updated>2012-04-14T22:51:00-07:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2012/04/14/10-most-underused-activerecord-relation-methods</id>
    <content type="html"><![CDATA[<p>Knee-deep in <code>ActiveRecord::Relation</code> code yesterday, I was reminded of some interesting nuggets that I&#8217;ve seen used far too rarely. Here, I’ve gathered my top ten most underused relation methods from that list for your reading delight.</p>

<!-- more -->


<h3>10. <code>first_or_create</code> with a block</h3>

<p><code>first_or_create</code> is very familiar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tale of Two Cities&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first_or_create</span>
</span></code></pre></td></tr></table></div></figure>


<p>and does exactly what it says. Often, though, you want to find a record with certain attributes, or create one with those <em>and</em> additional attributes. To do this succinctly, you can supply a block to <code>first_or_create</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tale of Two Cities&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first_or_create</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
</span><span class='line'>  <span class="n">book</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="s1">&#39;Charles Dickens&#39;</span>
</span><span class='line'>  <span class="n">book</span><span class="o">.</span><span class="n">published_year</span> <span class="o">=</span> <span class="mi">1859</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>9. <code>first_or_initialize</code></h3>

<p>If you don&#8217;t want to save the record yet, you can use <code>first_or_initialize</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tale of Two Cities&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first_or_initialize</span>
</span></code></pre></td></tr></table></div></figure>


<h3>8. <code>scoped</code></h3>

<p>Sometimes you want an <code>ActiveRecord::Relation</code> representing all the records of a class. You can easily generate one using the <code>scoped</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">query</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">scoped</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2">%&quot;</span>
</span><span class='line'>    <span class="n">where</span><span class="p">(</span><span class="s2">&quot;title like ? or author like ?&quot;</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>7. <code>none</code> <em>(rails 4 only)</em></h3>

<p>Likewise, sometimes you want an <code>ActiveRecord::Relation</code> that contains no objects. Returning an empty array is usually not a great idea if the consumer of your API is expecting a relation object. Instead, you can use <code>none</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">filter_name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">filter_name</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:all</span>
</span><span class='line'>    <span class="n">scoped</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:published</span>
</span><span class='line'>    <span class="n">where</span><span class="p">(</span><span class="ss">:published</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:unpublished</span>
</span><span class='line'>    <span class="n">where</span><span class="p">(</span><span class="ss">:published</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">none</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong>  You have to be seriously living on the edge to use <code>none</code> right now. It will be available in rails 4, but not 3. It is easy to write your own in the meantime, though, checkout this <a href="http://stackoverflow.com/questions/4877931/how-to-return-an-empty-activerecord-relation">stack overflow thread</a>.</p>

<h3>6. <code>find_each</code></h3>

<p>If you want to iterate over thousands of records, you probably don&#8217;t want to use <code>each</code>. It will execute a single query to get all the records, and then instantiate them all into memory. If you have enough memory to spare, go for it. Otherwise, this is a nice way to freeze up your Rails app! <code>find_each</code> instead finds a batch of records at a time (1000 by default) and yields those one at a time, so that you don&#8217;t have them all in memory at the same time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:published</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Do something with </span><span class="si">#{</span><span class="n">book</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> here!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can&#8217;t specify the order of records yielded by <code>find_each</code>. If you specify one on your relation, it will simply be ignored.</p>

<h3>5. <code>to_sql</code> and <code>explain</code></h3>

<p><code>ActiveRecord</code> is great, but it doesn&#8217;t always generate the queries you think it will. Jump in the console and run these commands on the relation you&#8217;re building, to make sure it maps to a smart query, or that it&#8217;s using the indices you lovingly crafted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Library</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span><span class="o">.</span><span class="n">to_sql</span>
</span><span class='line'><span class="c1"># =&gt; SQL query for you database.</span>
</span><span class='line'><span class="no">Libray</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span><span class="o">.</span><span class="n">explain</span>
</span><span class='line'><span class="c1"># =&gt; Database explain for the query.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. <code>find_by</code> <em>(rails 4 only)</em></h3>

<p>Rails code tends to be littered with lines like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Three Day Road&#39;</span><span class="p">,</span> <span class="ss">:author</span> <span class="o">=&gt;</span> <span class="s1">&#39;Joseph Boyden&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead, you can use the shortcut method <code>find_by</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Three Day Road&#39;</span><span class="p">,</span> <span class="ss">:author</span> <span class="o">=&gt;</span> <span class="s1">&#39;Joseph Boyden&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which does exactly the same thing.</p>

<p><strong>Note:</strong>  You have to be seriously living on the edge to use <code>find_by</code> right now. It will be available in rails 4, but not 3.</p>

<h3>3. <code>scoping</code></h3>

<p>You can &#8220;scope&#8221; methods on a class to a particular relation. Consider the following example from the Rails documentation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Comment</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:post_id</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">scoping</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Comment</span><span class="o">.</span><span class="n">first</span> <span class="c1"># SELECT * FROM comments WHERE post_id = 1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is all kinds of useful.</p>

<h3>2. <code>pluck</code></h3>

<p>Want an array of column values for certain records? I&#8217;ve seen this too many times:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">published_book_titles</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, even worse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">published_book_titles</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead, use pluck:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">published_book_titles</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1. <code>merge</code></h3>

<p>I couldn&#8217;t live without this jewel, but it&#8217;s strangely un-documented in the source, and not mentioned in any guide or book I&#8217;ve seen. Among other uses, it allows you to do a join, and filter by a named scope on the joined model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Returns all the accounts that have unread messages.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">with_unread_messages</span>
</span><span class='line'>    <span class="n">joins</span><span class="p">(</span><span class="ss">:messages</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="no">Message</span><span class="o">.</span><span class="n">unread</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Soulmate.js—A jQuery front-end to the soulmate auto-suggestion gem]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/12/20/soulmate-dot-js-a-jquery-front-end-to-the-soulmate-auto-suggestion-gem/"/>
    <updated>2011-12-20T12:51:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/12/20/soulmate-dot-js-a-jquery-front-end-to-the-soulmate-auto-suggestion-gem</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/seatgeek/soulmate">Soulmate</a> is an excellent auto-suggestion gem built for speed on sinatra and redis. I recently switched a project&#8217;s auto-suggestion engine to it from sphinx, and saw 200ms average response times drop to 10ms. Aside from speed, another huge boon was being able to completely separate the auto-suggestion engine from the main app. This allows it to get overwhelmed with a huge number of requests without significantly affecting the user&#8217;s experience. (Decoupling is good!).</p>

<!-- more -->


<p>Soulmate provides a very nice http interface and leaves the front-end design up to the developer. I wrote <a href="https://github.com/mcrowe/soulmate.js">soulmate.js</a>, a jQuery front-end to soulmate. Together, they provide lightning-fast plug-n-play auto-suggestion. Soulmate.js boasts the following features:</p>

<ul>
<li><strong>Well tested:</strong> Ridiculous spec coverage using Jasmine.</li>
<li><strong>Clean markup:</strong> Renders a clean and semantic markup structure that is easy to style.</li>
<li><strong>Speed:</strong> Minimizes requests by maintaining a list of queries with no suggestions. No additional requests are made when a user keeps typing on an empty query.</li>
<li><strong>Cross-domain compatible:</strong> Uses jsonp to accommodate backends on separate domain (which is a good practice since it allows the auto-suggest system to get overwhelmed without affecting the main site).</li>
<li><strong>Customizable behaviour:</strong> Customized rendering of suggestions through a callback that provides all stored data for that suggestion. Customized suggestion selection behaviour through a callback.</li>
<li><strong>Adaptable:</strong> A modular, object-oriented design, that is meant to be very easy to adapt and modify.</li>
</ul>


<p>For more information, check out the README and specs on <a href="https://github.com/mcrowe/soulmate.js">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Rails debugging in IE with a Mac and VirtualBox]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/12/13/easy-rails-debugging-in-ie-with-a-mac-and-virtualbox/"/>
    <updated>2011-12-13T11:37:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/12/13/easy-rails-debugging-in-ie-with-a-mac-and-virtualbox</id>
    <content type="html"><![CDATA[<p>Internet Explorer is still more than 60% of my traffic, and I need to do a lot of feature testing on it. A lot of folks push up to a staging server then point a virtual machine to that server. This is too slow for me. Especially when I&#8217;m hunting down and fixing particularly pernicious css bugs, there is a lot of tweaking involved, and re-deploying for each test just doesn&#8217;t cut it.</p>

<!-- more -->


<p>Instead, I setup VirtualBox to connect to my development server so I don&#8217;t need to re-deploy to see changes in IE. It makes debugging in IE almost as easy as in other browsers!</p>

<p>Assuming you have, or can, setup VirtualBox with XP or Windows 7 (if not there are a thousand tutorials on google), the rest takes a couple of seconds. VirtualBox&#8217;s default setting will allow it to connect to your Mac&#8217;s localhost through <code>http://10.0.2.2</code>. Forwarding ports is messier, so instead we can run rails on port 80. This requires running your server as a super user. Assuming you&#8217;re using rvm, run:</p>

<pre><code>rvmsudo rails server -p 80
</code></pre>

<p>and verify you can hit the server at <code>http://localhost</code> on your Mac, and <code>http://10.0.2.2</code> in VirtualBox. You&#8217;re good to go!</p>

<p>While you&#8217;re at it, I&#8217;d recommend installing <a href="http://utilu.com/IECollection/">IE Collection</a>, so that you can easily test on all versions of IE on the same box.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubynu—A scaffold generator for ruby projects]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/12/12/rubynu-a-scaffold-generator-for-ruby-projects/"/>
    <updated>2011-12-12T12:17:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/12/12/rubynu-a-scaffold-generator-for-ruby-projects</id>
    <content type="html"><![CDATA[<p>Creating my preferred scaffolding for new ruby projects by hand has gotten old. Sure, there are tools out there like bundler&#8217;s <code>bundle gem</code> to do this for you, but they aren&#8217;t flexible enough to meet everybody&#8217;s preferences. I want something as flexible as my tastes are fickle, something I can change the template to on a whim.</p>

<!-- more -->


<p>So, I built <code>rubynu</code>. It&#8217;s a Thor script that leans heavily on Thor&#8217;s directory templating abilities. Thor is amazing for this kind of generator: instead of building everything programatically, you can define an entire directory template&mdash;using erb templating for file contents, file names, and even directory structure. This kind of template makes it stupid easy to add new files, or to do any number of structural changes to it without touching the script itself. By Thor&#8217;s Hammer!</p>

<p>Currently, <code>rubynu</code> builds a project with the standard structure:</p>

<pre><code>bin/
lib/
  %app_name%.rb
  %app_name%/
spec/
Gemfile
README.markdown 
</code></pre>

<p>It also sets up rspec, with a <code>spec_helper</code>, <code>.rspec</code>, and a pending spec; RVM with an <code>.rvmrc</code>; git with a <code>.gitignore</code>; as well as some useful scaffolded code.</p>

<p>For usage, installation instructions, and to view the source, check out <a href="https://github.com/mcrowe/Rubynu">rubynu on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paranoid - A backup script for when the world's out to get you]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/11/07/paranoid-a-backup-script-for-when-the-world-slash-s-out-to-get-you/"/>
    <updated>2011-11-07T16:28:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/11/07/paranoid-a-backup-script-for-when-the-world-slash-s-out-to-get-you</id>
    <content type="html"><![CDATA[<p>When I&#8217;ve put a ton of effort into a personal project, I tend to get paranoid that I&#8217;ll somehow find a way to toast it. I know, I know, git, github, and time machine already have my back. Sometimes that&#8217;s just not enough, though, and I find myself periodically making manual copies of important projects to a backup directory. Whether I need it or not, having hardcopy snapshots just makes me feel better.</p>

<!-- more -->


<p>So I wrote paranoid, a Thor script for those paranoid but lazy coders like me. Sure, we could use a one-liner <code>cp -rf</code>, or <code>rsync</code> command, but there are a few niceties that paranoid gives you:</p>

<ul>
<li><p>Timestamped backups, so they are never written over, and you can easily revisit a snapshot of the project at any given time.</p></li>
<li><p>You can specify files to exclude from a backup on a project-by-project basis by modifying a <code>.backupignore</code> file. This allows you to ignore <code>.git</code> and <code>.bundle</code> directories as well as any project specific files such as large data dumps that you might not want copied over and over.</p></li>
</ul>


<h3>Install paranoid</h3>

<p>Paranoid is a <a href="https://github.com/wycats/thor">Thor</a> script, and you will have to install Thor first. Then, clone the repository and run: <code>thor install paranoid.thor</code></p>

<h3>Make your projects paranoid</h3>

<p>In your project root directory, run: <code>thor paranoid init</code>
This creates a default <code>.backupignore</code> file. This file defines patterns for files you don&#8217;t want to backup in this project. You can now add or remove patterns as you wish.</p>

<h3>Backup a paranoid project</h3>

<p>In your project root directory, run: <code>thor paranoid backup</code>
This rsyncs your project to the <code>~/.paranoid</code> directory, ignoring any files matching the patterns in the project&#8217;s <code>.backupignore</code> file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering Pop-ups From Embedded Scripts]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/11/07/filtering-pop-ups-from-embedded-scripts/"/>
    <updated>2011-11-07T12:05:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/11/07/filtering-pop-ups-from-embedded-scripts</id>
    <content type="html"><![CDATA[<p>Recently I had a problem where a creative embedded on my site was periodically opening pop-ups on my users without my consent. The agency&#8217;s team assured me this shouldn&#8217;t be happening, but claimed they couldn&#8217;t re-create the issue. In truth, they just sell too many third-party ads to verify all of them.</p>

<!-- more -->


<p>Since these ads are breaking their agreement, I felt it was in my right to block them for my users. I decided to create a filter in my pages to block embedded scripts from opening unwanted windows. I couldn&#8217;t find anything good about this on the internets, so I thought I&#8217;d share the solution I came up with.</p>

<p>My first stab at the problem was to override the <code>window.open</code> function (which the offending script would be calling). I made it silently do nothing when called, by redefining it as a stub:</p>

<script src="https://gist.github.com/1440000.js?file=popup_blocker.js.coffee"></script>


<p>These few characters did the trick. Any code trying to open a pop-up fires the new <code>window.open</code> and happily continues on its way, unaware that no window was actually open.</p>

<p>I was happy with this solution until, one day, I tried including <a href="http://www.addthis.com">addthis</a> on the site. The addthis widget opens a pop-up for many of its providers, and my hack, of course, dutifully blocks it every time! Alas, it seems a site sometimes needs to be able to open pop-ups for the powers of good&#8230;</p>

<p>We need to be able to filter requested pop-ups: allowing the ones we trust, and blocking the rest. So, I created a whitelist filter on <code>window.open</code> by first saving an aliased copy, and then redefining it to a new method that conditionally calls the copy.</p>

<script src="https://gist.github.com/1440000.js?file=popup_filter.js.coffee"></script>


<p>Now, when <code>window.open('http://www.addthis.com/...', ...)</code> gets called, the regular expression matches and the aliased method gets called just as the addthis widget expects. However, when <code>window.open('http://nefarious-ad-site/...', ...)</code> gets called, the request is nicely eaten up.</p>

<p>Cool! We can now manually filter pop-ups from opening on our site based on the requested url.</p>

<p><strong>Footnotes</strong></p>

<ul>
<li><p>These code samples are coffeescript, of course, not javascript. I&#8217;m sure you can use your creativity to compile them in your head if you need to.</p></li>
<li><p>Both these techniques were tested and work in IE8+, Firefox 3.6+, Chrome, and Safari. Other browsers, no idea.</p></li>
<li><p>This technique will not work out of the box to filter pop-ups opened from scripts loaded within iframes. You may be able to modify this to handle that case.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I was framed!]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/11/06/i-was-framed/"/>
    <updated>2011-11-06T11:56:00-08:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/11/06/i-was-framed</id>
    <content type="html"><![CDATA[<p>Patrolling the SERPs for a website I was working on one day, I came across something odd: An exact duplicate of my site at a different domain, startlingly high in the rankings. Here is its source:</p>

<script src="https://gist.github.com/1439471.js?file=iframe_wrapper.html"></script>




<!-- more -->


<p>OK, it&#8217;s my site in an frame, fine. The comment, though, left me biting my nails. <em>Who are You</em>&mdash;capital <em>y</em>, no question-mark. Is it just me, or does that sound menacing? Was this meant for me? A way of getting my attention, the scraper knowing I would read the source of the site that hot-linked me? I was perturbed at having no clue what someone&#8217;s motivation was for this. There was no way to profit that I could tell: users were still on <em>my</em> site, just with a different domain. And, the hot-linking site used a real, 8-letter domain; too expensive to be a random attack. This was deliberate.</p>

<p>My first line of attack, of course, was to try to contact the offender and ask&mdash;kindly&mdash;that they stop ripping my site off. No luck. The domain was registered privately, and the previous owner couldn&#8217;t help track down the buyer.</p>

<p>I quickly learned first-hand that this is an effective way to hurt the google rankings of a site, by pushing duplicate content up at a different domain. I can only assume that this was a trick played by one of my competitors to stop my site from getting traction, together with a menacing message to make me feel welcome. I&#8217;ll be honest, I was/am definitely a little spooked. There are plenty of shady characters in my industry, and new competition is never greeted with open arms. Was I going to wake up to a couple of thugs banging my door down? OK, maybe I&#8217;ve watched too many thrillers, but you never know!</p>

<p>Once I got over being cheesed and worried, beating this attack was pretty easy. Adding a canonical url helps google and others learn (slowly) that yours is the real site, and this fixed our rankings. You can do this in Rails with Haml by adding:</p>

<script src="https://gist.github.com/1439471.js?file=application.html.haml%20"></script>


<p>to your <code>application.html.haml</code>.</p>

<p>I also added a frame-busting script which redirects the user to my site if they are viewing it in a frame or an iframe:</p>

<script src="https://gist.github.com/1439471.js?file=frame_buster.js.coffee"></script>


<p>This doesn&#8217;t help with spiders or indexing as it relies on Javascript, but it does make sure that most users don&#8217;t get trapped on the false domain. I got this idea from Jeff Atwood&#8217;s <a href="http://www.codinghorror.com/blog/2009/06/we-done-been-framed.html">article on frame busting</a>. As Jeff points out, the wrapping page has the last say on Javascript, so it can always beat any tricks like this, but you can at least make it frustrating for them to try! (Note that this technique will interfere with some tools you might use which show your site in an iframe, such as google analytics&#8217; in-page analytics. You could add a whitelist feature to this, but I didn&#8217;t need to.)</p>

<p>No bats to my knees so far. Knock on wood&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript templates to the rescue]]></title>
    <link href="http://blog.mitchcrowe.com/blog/2011/09/14/javascript-templates-to-the-rescue/"/>
    <updated>2011-09-14T18:05:00-07:00</updated>
    <id>http://blog.mitchcrowe.com/blog/2011/09/14/javascript-templates-to-the-rescue</id>
    <content type="html"><![CDATA[<p>I&#8217;m a huge fan of ajax requests which simply return json, letting the client decide what it wants to do with the data. Formatting that data into html client-side, however, has always felt ugly as sin to me. So, we revert to rendering the html on the server and sending that html as an ajax response. This model is fine for simple pages, especially when all we want to do is display data asynchronously. Once we want to interact with this new data, do calculations on it, manipulate it further, things start to get ugly. In the end, I strongly believe that when the client requests data via ajax, it should get data, and not display logic, back.</p>

<!-- more -->


<p>Javascript templates make rendering html client-side a viable option. Actually, they can make it as nice as rendering with something like rails partials.</p>

<p>Don&#8217;t believe me? Let&#8217;s check out a simple example, and compare solving it with simple javascript, then with jquery helpers, compared with a few js templates.</p>

<p>Say I have a list of todo actions (which may have been returned via json from an ajax request)</p>

<script src="https://gist.github.com/1031660.js?file=jst_vartodos.js"></script>


<p>and a container</p>

<script src="https://gist.github.com/1031660.js?file=ulcontainer.html"></script>


<p>I want to render checkboxes and labels for these todos in the container, like this:</p>

<script src="https://gist.github.com/1031660.js?file=end.html"></script>


<p>Let&#8217;s see how this looks.</p>

<h4>plain javascript</h4>

<script src="https://gist.github.com/1031660.js?file=plainjs.html"></script>


<p>Pretty ugly. It&#8217;s impossible to see the actual html structure at a glance. Of course it might look cleaner with document.write&#8217;s, but that&#8217;s an incredibly inflexible solution not to mention the fact that constructing a long string to display html is still gross.</p>

<h4>jQuery</h4>

<script src="https://gist.github.com/1031660.js?file=jquery.html"></script>


<p>Better. Cleaner. Easier to write. Still hard to see the actual html structure.</p>

<h4><a href="http://handlebars.strobeapp.com/">handlebars.js</a></h4>

<script src="https://gist.github.com/1031660.js?file=handlebars.html"></script>


<p>Nice right? A good separation of logic and display. Easy to see the structure of the html at a glance. (Note that I replaced script with scrip-t just to trick the gist syntax highlighter into recognizing html here. You don&#8217;t really use a scrip-t tag!)</p>

<h4><a href="http://icanhazjs.com/">icanhaz.js</a></h4>

<script src="https://gist.github.com/1031660.js?file=icanhaz.html"></script>


<p>Pretty good too. icanhaz builds in the idea of loading html from a script tag, so you don&#8217;t need the boilerplate code to get it&#8217;s html using jquery and compile a template. I actually prefer the flexibility of handlebars&#8217; method more, though.</p>

<h4><a href="http://api.jquery.com/jquery.tmpl/">jquery tmpl plugin</a></h4>

<script src="https://gist.github.com/1031660.js?file=tmpl.html"></script>


<p>Pretty similar to handlebars. I do like that as a jquery plugin, we get no scope pollution.</p>

<p>You should also have a look at <a href="http://blog.couchbase.com/mustache-js">moustache.js</a>, which handlebars.js is built upon, and the built in templates in <a href="http://documentcloud.github.com/underscore/">underscore.js</a>.</p>
]]></content>
  </entry>
  
</feed>
